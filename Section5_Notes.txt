# The Question-Answer App

## Lesson 49) Demo

The app we'll be making allows users to ask questions and allows promoted experts to answer asked questions.
A logged in user can ask questions directed to experts, and when that expert logs in they can see all the questions that
were directed to them.
Once they answer the question, that question will be shown on the home screen with a list of other questions and when you 
click on a question, you can view the answer to the question.
There are multiple roles in the app, as well as log in and log out functionalities.

## Lesson 50) Overview of Templates:

We'll start by looking through the template files provided to start this project.
There are 8 template files that'll comprise the parts of the app that a user will be able to go to.
We have the home template with a list of questions already answered by an expert.
Then registration page for users to register to the app.
A log in page for registered users to log in.
The Ask a Question template page, lets you type in a question and select an expert to ask, then submit.
The Answer page for experts to answer questions directed to them.
The Question template page to view a question and answer and relevant details.
An unanswered questions page for an expert to view all the unanswered questions directed at them.
Lastly, there's a User List page wherein an admin can manage the users and experts in the page.

## Lesson 51) Install and Templates

This lesson covers all the up front initializations done for this lesson.
Including the app.py, virtual environment setup first, including installing flask.
We'll then download the html and css files from the lesson resources and move them into the templates and static folders appropriately.
We'll now go ahead and set up our base routes to work with for the various pages going forward.
For now each route function will be a pass, as we're just looking to initialize each route first.
In total, we'll have created 8 routes.
Having set up the routes we can now configure the routes to return the relevant template for each one.
Having set up the render_templates for each route we'll do a test run of the app, and upon loading the pages up we can see the styling
is incorrect, which implies the css files are not linked to the html files.
So next we'll go to each of the templates and update the static files to reference the styling correctly.
Remember to use url_for to reference the stylesheets.
Having done this we'll re-run the app to test a page and confirm the stylesheets are being referenced correctly.
Note that there are 3 css files supplied in the course resources, the one named "bootstrap-theme" isn't used, and would
otherwise be deleted, but in this case will be kept.

## Lesson 52) Database Helpers

Before actually creating the database we'll be using for this app, we'll create the database helper functions for 
accessing the database (connect_db and get_db).
