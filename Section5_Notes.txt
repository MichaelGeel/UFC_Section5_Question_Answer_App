# The Question-Answer App

## Lesson 49) Demo

The app we'll be making allows users to ask questions and allows promoted experts to answer asked questions.
A logged in user can ask questions directed to experts, and when that expert logs in they can see all the questions that
were directed to them.
Once they answer the question, that question will be shown on the home screen with a list of other questions and when you 
click on a question, you can view the answer to the question.
There are multiple roles in the app, as well as log in and log out functionalities.

## Lesson 50) Overview of Templates:

We'll start by looking through the template files provided to start this project.
There are 8 template files that'll comprise the parts of the app that a user will be able to go to.
We have the home template with a list of questions already answered by an expert.
Then registration page for users to register to the app.
A log in page for registered users to log in.
The Ask a Question template page, lets you type in a question and select an expert to ask, then submit.
The Answer page for experts to answer questions directed to them.
The Question template page to view a question and answer and relevant details.
An unanswered questions page for an expert to view all the unanswered questions directed at them.
Lastly, there's a User List page wherein an admin can manage the users and experts in the page.

## Lesson 51) Install and Templates

This lesson covers all the up front initializations done for this lesson.
Including the app.py, virtual environment setup first, including installing flask.
We'll then download the html and css files from the lesson resources and move them into the templates and static folders appropriately.
We'll now go ahead and set up our base routes to work with for the various pages going forward.
For now each route function will be a pass, as we're just looking to initialize each route first.
In total, we'll have created 8 routes.
Having set up the routes we can now configure the routes to return the relevant template for each one.
Having set up the render_templates for each route we'll do a test run of the app, and upon loading the pages up we can see the styling
is incorrect, which implies the css files are not linked to the html files.
So next we'll go to each of the templates and update the static files to reference the styling correctly.
Remember to use url_for to reference the stylesheets.
Having done this we'll re-run the app to test a page and confirm the stylesheets are being referenced correctly.
Note that there are 3 css files supplied in the course resources, the one named "bootstrap-theme" isn't used, and would
otherwise be deleted, but in this case will be kept.

## Lesson 52) Database Helpers

Before actually creating the database we'll be using for this app, we'll create the database helper functions for 
accessing the database (connect_db and get_db).
These are being stored in a separate file named database.py and we'll then import get_db in the app (as it's the only function we directly call)
Once the database has been created we'll get the path to the database and add it in the connect_db function.
Lastly, we'll add the @app.teardown decorator to automatically close any open connection to the database upon route commpletion.

## Lesson 53) Creating the Database:

We'll now be creating the actual database, and to do this, we'll first create the schema, in a file called schema.sql.
Our data model will simply have 2 tables, users and questions.
We could make the data model more complex, but it's entirely unnecessary so we'll keep it simple as is.
Note that in the questions table, the answer_text field we're creating is allowed to be null as a question cannot have an answer upon creation.
All other data points are not null.
We could also make use of foreign keys, but again it's not necessary given the data model.
Having done this we'll now go ahead and get our database created by executing the schema.
    "cat schema.sql | sqlite3 questions.db"
That should successfully create the database, then from there we go in and confirm the tables are there alongside being able to query the tables, 
even though nothing is returned.

## Lesson 54) Register User:

We'll now set up the register user route so we can register users into the database.
Firstly, in the register page template, we'll give the form a method and action, namely post and to call itself.
Next we'll change the names of the inputs as the form inputs get submitted by name and not id.
Having done this we'll now test if the submit works before continuing, which we'll check the request type to determine the output.
We'll also include logic to capture the name and password from the form to ensure that those values are being passed in the post request as well.
Having confirmed that the form is submitting, we'll now go ahead and write the code to register the user into the database.
We'll now need to import a library to allow for password hashing, which is basicaly taking a certain password and converting
it into a form that cannot be used to convert back to the original.
So you hash the password to get a long string of characters and then every time someone logs in, you hash the entered password 
and compare it to the originally hashed password to see if it's a match.
If they match, the user is logged in, if not, prompt the user to re-enter their password.
This is done because if the database is broken into for some reason, there won't be plaintext passwords that are easy to steal.
Note that password hashing doesn't mean you're 100% secure, nothing is completely secure, but it's better than not having it.
To handle the hashing, we'll import from a library called werkzeug which is what flask is built ontop of, so no installation is required.
From werkzeug we'll be importing 2 security functions:
    "from werkzeug.security import generate_password_hash, check_password_hash"
So now we'll get going with inserting the data to the database.
We'll get the db connection and write the insert query to execute.
When inserting the password into the database, we'll hash it using the generate_password_hash function.
    "hashed_password = generate_password_hash(password, method="pbkdf2")"
Note when generating a password hash, we have to provide the string we're hashing as well as the hashing method, which 
in this case is "pbkdf2".
###Note that in the video, "sha256" is used, but this is deprecated so we'll use the listed method.
A new user will be assigned the lowest accessibility tier, so expert and admin will be 0.
Expert will be obtained by getting promoted by the admin in the users screen, and the admin rights are gained through backend access 
into the database.
We'll then commit the data to the database.
Finally, we'll change the return statement to reflect "User created".
We'll now go ahead and attempt to create a user.
Note that we also needed to go back to the connect_db function to include the path to our database.
Once we've successfully created a user, we'll go verify the data inside the database itself as well.
Having verified the user is there, we'll also go ahead and promote this user to admin as we'll need the admin user for future functionalities that we'll be 
building out.

## Lesson 55) Login:

While the register route is still incomplete we're going to move on to creating the log in functionality now.
So we need to capture the log in information from the log in form and then from there see if the user actually exists.
First off, we'll create the submit form action and method in the login html template.
In the previous lesson we set the register action to be just "/register" and while this does work we're going to alter that
to use the url_for method of redirecting.
While once again give the inputs names.
We'll set the route to accept both get and post requests.
At this point we'll take a moment to test that our code is working.
Our next steps after testing is to now take the name passed in in the login form and query the database to find that user.
We're going to get the row in the database that has the name passed in the form, then we'll compare the saved and entered passwords (in hashed format)
to see if the user can be logged in.
We're going to assume each user name is unique in the database so we'll use a fetchone method to get the results from the cursor.
For now, we'll return the entered password to verify that we're retrieving the data successfully and test.
Note that at the moment, if we enter an incorrect value, the app will error out as it returns a NoneType.
Now we need to check that the entered password and database password match, and we'll use the check_password_hash function for that.
It takes in the saved hashed password, and the user's entered password to see if they match and returns the appropriate boolean value.
Note that in check_password_hash, you always first pass the hashed password, then the plaintext password.
Now we'll use the check in a simple if statement, and if there's a match, we'll give a simple output indicating as such for now and
and else if it's wrong.

## Lesson 56) Sessions:

We're now going to work on creating a session wherever a user logs in successfully.
We're going to import session from flask and the os module to allow us to generate a random string which will be used 
for the configuration value of the secret key.
We'll the create the secret key in the app.config using os.urandom(24) to generate a random unicode string of 24 characters 
that will be our secret key.
Then in the log in route, upon successful login, the session will be created, and it'll house the name of the user who logged in.
Now to test if the session is being created successfully, in the index route, we'll pass the name of the currently logged in user, 
by looking at the session and if the name exists, we'll change the home template slightly.
To do this well run an if statement checking for the key "user" in session.
Now in the home template, in the navbar ul element, we'll encompass the Login item in an if statement where if there's a user in the session,
the login item won't appear as the user is already logged in.
Similarly, we'll encapsulate the Logout item in an if so that only if a user is logged in it'll appear.
Now if we test the application, if we load the home route we shouldn't see the logout item, and then login and return to the home route, 
the login item won't be there.
Now we'll work on the log out route to allow a user to log out and remmove them from the session.
Firstly, we'll create the route for the logout functionality.
In this route we'll simply pop the user out of the session and redirect them to the home page.
Lastly, we need to add the route link address to the log out and log in buttons in the navbar of the home page.
Note that a user is effectively logged out when they are no longer in the session of the web app.
And with one last test, we should be able to now confirm being able to log in and out of the app.

## Lesson 57) Common User Function:

So we need to be checking if the user is logged in in every route, but rewriting the code in every route is inefficient, 
instead, we'll create a function that returns all information about the user if they're logged in.
We'll check for a user like we did in the index route, if they're found, we'll search the database for all the information of that user.
We'll use a very similar query to what we had in the login route for fetching the user info, but we'll also fetch the 
expert and admin status as well as we'll be using that info to identify what is available to the logged in user.
Note that querying the db for the user only applies if there's an active user logged in.
So now that we have a user_result from the db, we can ascertain if a user is logged in based on whether this result exists or not.
Then we'll return the user_result, and so any route that needs the current user can just call this function.
So we'll test this by replacing the existing code in the index route to instead call the new function.
Note that in the templates we only check to see if the user exists, so we don't need to pass anything specific to the template and can just 
pass the entire results variable to it.
So we're get to copy the function call to every route in our app now minus the logout route, because we'll need to know who the logged in user is in all our route.

## Lesson 58) Updating Links

